{
  "status" : "pass",
  "tests" : [ {
    "name" : "totalTimeInMinutes method calculates the correct value for multiple layers",
    "test_code" : "@Test\n@Tag(\"task:4\")\n@DisplayName(\"totalTimeInMinutes method calculates the correct value for multiple layers\")\npublic void total_time_in_minutes_for_multiple_layers() {\n    assertThat(new Lasagna().totalTimeInMinutes(4, 8)).isEqualTo(16);\n}",
    "status" : "pass",
    "task_id" : 4
  }, {
    "name" : "totalTimeInMinutes method calculates the correct value for single layer",
    "test_code" : "@Test\n@Tag(\"task:4\")\n@DisplayName(\"totalTimeInMinutes method calculates the correct value for single layer\")\npublic void total_time_in_minutes_for_one_layer() {\n    assertThat(new Lasagna().totalTimeInMinutes(1, 30)).isEqualTo(32);\n}",
    "status" : "pass",
    "task_id" : 4
  }, {
    "name" : "remainingMinutesInOven method calculates and returns the correct value",
    "test_code" : "@Test\n@Tag(\"task:2\")\n@DisplayName(\"remainingMinutesInOven method calculates and returns the correct value\")\npublic void remaining_minutes_in_oven() {\n    assertThat(new Lasagna().remainingMinutesInOven(25)).isEqualTo(15);\n}",
    "status" : "pass",
    "task_id" : 2
  }, {
    "name" : "preparationTimeInMinutes method calculates the correct value for single layer",
    "test_code" : "@Test\n@Tag(\"task:3\")\n@DisplayName(\"preparationTimeInMinutes method calculates the correct value for single layer\")\npublic void preparation_time_in_minutes_for_one_layer() {\n    assertThat(new Lasagna().preparationTimeInMinutes(1)).isEqualTo(2);\n}",
    "status" : "pass",
    "task_id" : 3
  }, {
    "name" : "expectedMinutesInOven method returns the correct value",
    "test_code" : "@Test\n@Tag(\"task:1\")\n@DisplayName(\"expectedMinutesInOven method returns the correct value\")\npublic void expected_minutes_in_oven() {\n    assertThat(new Lasagna().expectedMinutesInOven()).isEqualTo(40);\n}",
    "status" : "pass",
    "task_id" : 1
  }, {
    "name" : "Implemented the totalTimeInMinutes method",
    "test_code" : "@Test\n@Tag(\"task:4\")\n@DisplayName(\"Implemented the totalTimeInMinutes method\")\npublic void implemented_total_time_in_minutes() {\n    assertThat(new Lasagna().hasMethod(\"totalTimeInMinutes\", int.class, int.class)).withFailMessage(\"Method totalTimeInMinutes must be created\").isTrue();\n    assertThat(new Lasagna().isMethodPublic(\"totalTimeInMinutes\", int.class, int.class)).withFailMessage(\"Method totalTimeInMinutes must be public\").isTrue();\n    assertThat(new Lasagna().isMethodReturnType(int.class, \"totalTimeInMinutes\", int.class, int.class)).withFailMessage(\"Method totalTimeInMinutes must return an int\").isTrue();\n}",
    "status" : "pass",
    "task_id" : 4
  }, {
    "name" : "Implemented the remainingMinutesInOven method",
    "test_code" : "@Test\n@Tag(\"task:2\")\n@DisplayName(\"Implemented the remainingMinutesInOven method\")\npublic void implemented_remaining_minutes_in_oven() {\n    assertThat(new Lasagna().hasMethod(\"remainingMinutesInOven\", int.class)).withFailMessage(\"Method remainingMinutesInOven must be created\").isTrue();\n    assertThat(new Lasagna().isMethodPublic(\"remainingMinutesInOven\", int.class)).withFailMessage(\"Method remainingMinutesInOven must be public\").isTrue();\n    assertThat(new Lasagna().isMethodReturnType(int.class, \"remainingMinutesInOven\", int.class)).withFailMessage(\"Method remainingMinutesInOven must return an int\").isTrue();\n}",
    "status" : "pass",
    "task_id" : 2
  }, {
    "name" : "preparationTimeInMinutes method calculates the correct value for multiple layers",
    "test_code" : "@Test\n@Tag(\"task:3\")\n@DisplayName(\"preparationTimeInMinutes method calculates the correct value for multiple layers\")\npublic void preparation_time_in_minutes_for_multiple_layers() {\n    assertThat(new Lasagna().preparationTimeInMinutes(4)).isEqualTo(8);\n}",
    "status" : "pass",
    "task_id" : 3
  }, {
    "name" : "Implemented the expectedMinutesInOven method",
    "test_code" : "@Test\n@Tag(\"task:1\")\n@DisplayName(\"Implemented the expectedMinutesInOven method\")\npublic void implemented_expected_minutes_in_oven() {\n    assertThat(new Lasagna().hasMethod(\"expectedMinutesInOven\")).withFailMessage(\"Method expectedMinutesInOven must be created\").isTrue();\n    assertThat(new Lasagna().isMethodPublic(\"expectedMinutesInOven\")).withFailMessage(\"Method expectedMinutesInOven must be public\").isTrue();\n    assertThat(new Lasagna().isMethodReturnType(int.class, \"expectedMinutesInOven\")).withFailMessage(\"Method expectedMinutesInOven must return an int\").isTrue();\n}",
    "status" : "pass",
    "task_id" : 1
  }, {
    "name" : "Implemented the preparationTimeInMinutes method",
    "test_code" : "@Test\n@Tag(\"task:3\")\n@DisplayName(\"Implemented the preparationTimeInMinutes method\")\npublic void implemented_preparation_time_in_minutes() {\n    assertThat(new Lasagna().hasMethod(\"preparationTimeInMinutes\", int.class)).withFailMessage(\"Method preparationTimeInMinutes must be created\").isTrue();\n    assertThat(new Lasagna().isMethodPublic(\"preparationTimeInMinutes\", int.class)).withFailMessage(\"Method preparationTimeInMinutes must be public\").isTrue();\n    assertThat(new Lasagna().isMethodReturnType(int.class, \"preparationTimeInMinutes\", int.class)).withFailMessage(\"Method preparationTimeInMinutes must return an int\").isTrue();\n}",
    "status" : "pass",
    "task_id" : 3
  } ],
  "version" : 3
}